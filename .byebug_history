c
File.exists?("#{Rails.root}/log/dashboard_data.json")
c
File.exists?("#{Rails.root}/log/dashboard_data.json")
c
test
c
n
npid_pool_update
npids
n
npids
n
npids
n
npids
n
npids
n
npids
n
c
n
unassigned_npids = LocationNpid.where(location_id: location.location_id, assigned: false).count
exit
response.status
response = JSON.parse(RestClient.post(assign_url,{limit: npid_balance, location_id: location.location_id}.as_json,headers={Authorization: token['access_token']}))
response = JSON.parse(RestClient.post(assign_url,{limit: npid_balance, location_id: location.location.location_id}.as_json,headers={Authorization: token['access_token']}))
assign_url = "#{url}/v1/assign_npids"
response = JSON.parse(RestClient.post(assign_url,headers={Authorization: token['access_token']}))
Location.where("name like '%mdeka%'");
Location.where('name like '%mdeka%';
response = JSON.parse(RestClient.post(assign_url,headers={Authorization: token['access_token']}.to_json))
response = JSON.parse(RestClient.post(assign_url,headers={Authorization: token['access_token']}.to_json)),  {content_type: :json, accept: :json}
response = JSON.parse(RestClient.post(assign_url,headers={Authorization: token['access_token']}.to_json
response = JSON.parse(RestClient.post(assign_url,headers={Authorization: token['access_token']}))
response = JSON.parse(RestClient.post(assign_url,, headers={Authorization: token['access_token']}))
response = JSON.parse(RestClient.post(assign_url, headers={Authorization: 'eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2NTU4MzQwMTd9.Fo-zXK7JKG1BjpwJnzl2uCZRx64_pDnkJraMYxuZzhE'}))
response = JSON.parse(RestClient.post(assign_url, headers={Authorization: 'eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2NTU4MzQwMTd9.Fo-zXK7JKG1BjpwJnzl2uCZRx64_pDnkJraMYxuZzhE'))
response = JSON.parse(RestClient.post(assign_url, headers={Authorization: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2NTU4MzQwMTd9.Fo-zXK7JKG1BjpwJnzl2uCZRx64_pDnkJraMYxuZzhE))
response = JSON.parse(RestClient.post(assign_url, headers={Authorization: token['access_token']}))
assign_url = "#{url}/v1/assign_npids?limit=#{npid_balance}&location_id=#{location.location_id}"
token = JSON.parse(RestClient.post(url + '/v1/login', {username: 'admin', password: 'bht.dde3!'}.to_json, {content_type: :json, accept: :json}))
response
response = JSON.parse(RestClient.post(assign_url, headers={Authorization: token['access_token']}))
response = JSON.parse(RestClient.post(assign_url, headers={Authorization: 'Bearer ' + token['access_token']}))
assign_url = "#{url}/v1/assign_npids?limit=#{npid_balance}&location_id=#{location.location_id}"
assign_url
c
npid_balance = (10_000 - unassigned_npids)
unassigned_npids
npid_balance = (10-000 - unassigned_npids)
npid_balance = (10,000 - unassigned_npids)
npid_balance = 10,000 - unassigned_npids
unassigned_npids
exit
ping_tested_sites
ping_test_sites
c
n
reachable_sites
exit
reachable_sites
c
DashboardService.site_activities
DashboardService.connected_sites
DashboardService.npids
DashboardService.client_movements
DashboardService.new_reg_past_30
DashboardService.new_reg_by_site
PersonDetail.where('date(date_registered) = date(now())').count
